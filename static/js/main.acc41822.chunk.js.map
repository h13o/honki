{"version":3,"sources":["reducers/index.js","actions/index.js","Timer.js","App.js","serviceWorker.js","index.js","Timer.scss"],"names":["combineReducers","activeTimer","state","type","payload","term","title","minute","progress","Timer","dispatch","useDispatch","useSelector","useEffect","setTimeout","addProgress","Math","min","strokeDashoffset","style","mainCir","className","finishMessage","hidden","viewBox","strokeDasharray","subCir","App","value","placeholder","onInput","e","updateTitle","target","updateMinute","onClick","updateTerm","moment","format","add","Boolean","window","location","hostname","match","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.acc41822.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport {\n  ACTIVATE_TIMER,\n  UPDATE_TITLE,\n  UPDATE_MINUTE,\n  UPDATE_TERM,\n  ADD_PROGRESS\n} from \"../actions\";\n\nconst activeTimer = (state = false, { type, payload }) => {\n  switch (type) {\n    case ACTIVATE_TIMER:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst title = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case UPDATE_TITLE:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst minute = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case UPDATE_MINUTE:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst term = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case UPDATE_TERM:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst progress = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case ADD_PROGRESS:\n      return payload;\n    default:\n      return 0.0;\n  }\n};\nexport default combineReducers({\n  activeTimer,\n  term,\n  title,\n  minute,\n  progress\n});\n","export const ACTIVATE_TIMER = \"ACTIVATE_TIMER\";\nexport const UPDATE_TITLE = \"UPDATE_TITLE\";\nexport const UPDATE_MINUTE = \"UPDATE_MINUTE\";\nexport const UPDATE_TERM = \"UPDATE_TERM\";\nexport const ADD_PROGRESS = \"ADD_PROGRESS\";\n\nexport function activateTimer(b) {\n  return { type: ACTIVATE_TIMER, payload: b };\n}\n\nexport function updateTitle(title) {\n  return { type: UPDATE_TITLE, payload: title };\n}\n\nexport function updateMinute(minute) {\n  return { type: UPDATE_MINUTE, payload: minute };\n}\nexport function updateTerm(term) {\n  return { type: UPDATE_TERM, payload: term };\n}\nexport function addProgress(progress) {\n  return { type: ADD_PROGRESS, payload: progress };\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addProgress } from \"./actions\";\nimport style from \"./Timer.scss\";\n\nconst Timer = () => {\n  const dispatch = useDispatch();\n  let { activeTimer, minute, progress } = useSelector(state => state);\n  minute = minute ? minute : 30;\n  useEffect(() => {\n    if (activeTimer && progress < 1) {\n      setTimeout(() => {\n        dispatch(addProgress(Math.min(progress + 1 / minute / 60, 1)));\n      }, 1000);\n    }\n  });\n  const strokeDashoffset = -style.mainCir * progress;\n  const finishMessage = () => {\n    if (progress == 1) {\n      return (\n        <div className=\"finishMessage\">\n          <div>Done!</div>\n        </div>\n      );\n    }\n  };\n  return (\n    <div className=\"timer__container\">\n      {finishMessage()}\n      <div hidden={progress == 1}>\n        <svg className=\"timer\" viewBox=\"0 0 100 100\">\n          <circle\n            className=\"timer__common timer__main\"\n            style={{ strokeDashoffset }}\n          />\n          <circle\n            className=\"timer__common timer__scale timer__scale--1min\"\n            strokeDasharray={`${0.5} ${style.subCir / minute - 0.5}`}\n          />\n          <circle\n            className=\"timer__common timer__scale timer__scale--10min\"\n            strokeDasharray={`${1} ${(style.subCir / minute) * 10 - 1}`}\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport \"./Timer\";\nimport \"./App.scss\";\nimport {\n  activateTimer,\n  updateTitle,\n  updateMinute,\n  updateTerm\n} from \"./actions\";\nimport Timer from \"./Timer\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const { activeTimer, term, title, minute } = useSelector(state => state);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Timer />\n        <input\n          className=\"input input__title\"\n          type=\"text\"\n          value={title}\n          placeholder=\"What do you focus?\"\n          onInput={e => dispatch(updateTitle(e.target.value))}\n          hidden={activeTimer}\n        ></input>\n        <input\n          className=\"input input__minute\"\n          type=\"text\"\n          value={minute}\n          placeholder=\"Minutes?\"\n          onInput={e => dispatch(updateMinute(e.target.value))}\n          hidden={activeTimer}\n        ></input>\n        <button\n          className=\"button__start\"\n          onClick={() => {\n            dispatch(activateTimer(true));\n            dispatch(\n              updateTerm(\n                moment().format(\"hh:mm\") +\n                  \" ~ \" +\n                  moment()\n                    .add(minute ? minute : 30, \"minutes\")\n                    .format(\"hh:mm\")\n              )\n            );\n          }}\n          hidden={activeTimer}\n        >\n          Start\n        </button>\n        <div className=\"title_container\">\n          <div className=\"title\" hidden={!activeTimer}>\n            {title}\n          </div>\n        </div>\n        <div className=\"term\" hidden={!activeTimer}>\n          {term}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainCir\":\"125.66371\",\"subCir\":\"282.74334\"};"],"sourceRoot":""}