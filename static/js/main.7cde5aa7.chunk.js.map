{"version":3,"sources":["sound/EndMelody.mp3","reducers/index.js","actions/index.js","Timer.js","App.js","serviceWorker.js","index.js","Timer.scss"],"names":["module","exports","combineReducers","activeTimer","state","type","payload","term","title","minute","progress","startTime","moment","Timer","dispatch","useDispatch","useSelector","useEffect","setTimeout","addProgress","Math","min","diff","strokeDashoffset","style","mainCir","className","UIfx","endMelody","play","finishMessage","hidden","viewBox","strokeDasharray","subCir","App","value","placeholder","onChange","e","updateTitle","target","updateMinute","onClick","updateTerm","format","add","animation","Boolean","window","location","hostname","match","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cde5aa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EndMelody.cc90fca3.mp3\";","import { combineReducers } from \"redux\";\nimport moment from \"moment\";\nimport {\n  ACTIVATE_TIMER,\n  RESET_TIMER,\n  UPDATE_TITLE,\n  UPDATE_MINUTE,\n  UPDATE_TERM,\n  ADD_PROGRESS\n} from \"../actions\";\n\nconst activeTimer = (state = false, { type, payload }) => {\n  switch (type) {\n    case ACTIVATE_TIMER:\n      return payload;\n    case RESET_TIMER:\n      return false;\n    default:\n      return state;\n  }\n};\nconst startTime = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case ACTIVATE_TIMER:\n      return moment();\n    default:\n      return state;\n  }\n};\n\nconst title = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case UPDATE_TITLE:\n      return payload;\n    case RESET_TIMER:\n      return \"\";\n    default:\n      return state;\n  }\n};\nconst minute = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case UPDATE_MINUTE:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst term = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case UPDATE_TERM:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst progress = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case ADD_PROGRESS:\n      return payload;\n    case RESET_TIMER:\n      return 0.0;\n    default:\n      return 0.0;\n  }\n};\nexport default combineReducers({\n  activeTimer,\n  term,\n  title,\n  minute,\n  progress,\n  startTime\n});\n","export const ACTIVATE_TIMER = \"ACTIVATE_TIMER\";\nexport const RESET_TIMER = \"RESET_TIMER\";\nexport const UPDATE_TITLE = \"UPDATE_TITLE\";\nexport const UPDATE_MINUTE = \"UPDATE_MINUTE\";\nexport const UPDATE_TERM = \"UPDATE_TERM\";\nexport const ADD_PROGRESS = \"ADD_PROGRESS\";\n\nexport function activateTimer(b) {\n  return { type: ACTIVATE_TIMER, payload: b };\n}\nexport function resetTimer() {\n  return { type: RESET_TIMER, payload: \"\" };\n}\n\nexport function updateTitle(title) {\n  return { type: UPDATE_TITLE, payload: title };\n}\n\nexport function updateMinute(minute) {\n  return { type: UPDATE_MINUTE, payload: minute };\n}\nexport function updateTerm(term) {\n  return { type: UPDATE_TERM, payload: term };\n}\nexport function addProgress(progress) {\n  return { type: ADD_PROGRESS, payload: progress };\n}\n","import React, { useEffect } from \"react\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addProgress } from \"./actions\";\nimport style from \"./Timer.scss\";\nimport UIfx from \"uifx\";\nimport endMelody from \"./sound/EndMelody.mp3\";\n\nconst Timer = () => {\n  const dispatch = useDispatch();\n  let { activeTimer, minute, progress, startTime } = useSelector(\n    state => state\n  );\n  minute = minute ? minute : 30;\n  useEffect(() => {\n    if (activeTimer && progress < 1) {\n      setTimeout(() => {\n        dispatch(\n          addProgress(\n            Math.min(\n              1,\n              moment().diff(moment(startTime), \"second\") / (minute * 60)\n            )\n          )\n        );\n      }, 1000);\n      // setTimeout(() => {\n      //   dispatch(addProgress(Math.min(progress + 1 / minute / 60, 1)));\n      // }, 1000);\n    }\n  });\n  const strokeDashoffset = -style.mainCir * progress;\n  const finishMessage = () => {\n    if (progress == 1) {\n      const tick = new UIfx(endMelody);\n      tick.play();\n      return (\n        <div className=\"finishMessage\">\n          <div>Done!</div>\n        </div>\n      );\n    }\n  };\n  return (\n    <div className=\"timer__container\">\n      {finishMessage()}\n      <div hidden={progress == 1}>\n        <svg className=\"timer\" viewBox=\"0 0 100 100\">\n          <circle\n            className=\"timer__common timer__main\"\n            style={{ strokeDashoffset }}\n          />\n          <circle\n            className=\"timer__common timer__scale timer__scale--1min\"\n            strokeDasharray={`${0.5} ${style.subCir / minute - 0.5}`}\n          />\n          <circle\n            className=\"timer__common timer__scale timer__scale--10min\"\n            strokeDasharray={`${1} ${(style.subCir / minute) * 10 - 1}`}\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport \"./App.scss\";\nimport {\n  activateTimer,\n  resetTimer,\n  updateTitle,\n  updateMinute,\n  updateTerm\n} from \"./actions\";\nimport Timer from \"./Timer\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const { activeTimer, term, title, minute, progress } = useSelector(\n    state => state\n  );\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Timer />\n        <input\n          className=\"input input__title\"\n          type=\"text\"\n          value={title}\n          placeholder=\"What do you focus?\"\n          onChange={e => dispatch(updateTitle(e.target.value))}\n          hidden={activeTimer}\n        ></input>\n        <input\n          className=\"input input__minute\"\n          type=\"number\"\n          value={minute}\n          placeholder=\"Minutes?\"\n          onChange={e => dispatch(updateMinute(e.target.value))}\n          hidden={activeTimer}\n        ></input>\n        <button\n          className=\"button__start\"\n          onClick={() => {\n            dispatch(activateTimer(true));\n            dispatch(\n              updateTerm(\n                moment().format(\"HH:mm\") +\n                  \" ~ \" +\n                  moment()\n                    .add(minute ? minute : 30, \"minutes\")\n                    .format(\"HH:mm\")\n              )\n            );\n          }}\n          hidden={activeTimer}\n        >\n          Start\n        </button>\n        <div className=\"title_container\">\n          <div\n            className=\"title\"\n            hidden={!activeTimer}\n            style={{\n              animation: `${progress != 1 ? \"blink 3s linear infinite\" : \"\"}`\n            }}\n          >\n            {title}\n          </div>\n        </div>\n        <div className=\"term\" hidden={!activeTimer}>\n          {term}\n        </div>\n        <button\n          className=\"button__start\"\n          hidden={progress != 1}\n          onClick={() => {\n            dispatch(resetTimer());\n          }}\n        >\n          NEW TIMER\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainCir\":\"125.66371\",\"subCir\":\"282.74334\"};"],"sourceRoot":""}